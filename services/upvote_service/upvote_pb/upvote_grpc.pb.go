// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package upvote_pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpvoteServiceClient is the client API for UpvoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpvoteServiceClient interface {
	AddUpvoteToComment(ctx context.Context, in *AddUpvoteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteUpvoteFromComment(ctx context.Context, in *DeleteUpvoteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type upvoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpvoteServiceClient(cc grpc.ClientConnInterface) UpvoteServiceClient {
	return &upvoteServiceClient{cc}
}

func (c *upvoteServiceClient) AddUpvoteToComment(ctx context.Context, in *AddUpvoteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/LearningGRPC.UpvoteService/AddUpvoteToComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) DeleteUpvoteFromComment(ctx context.Context, in *DeleteUpvoteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/LearningGRPC.UpvoteService/DeleteUpvoteFromComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpvoteServiceServer is the server API for UpvoteService service.
// All implementations must embed UnimplementedUpvoteServiceServer
// for forward compatibility
type UpvoteServiceServer interface {
	AddUpvoteToComment(context.Context, *AddUpvoteRequest) (*empty.Empty, error)
	DeleteUpvoteFromComment(context.Context, *DeleteUpvoteRequest) (*empty.Empty, error)
	mustEmbedUnimplementedUpvoteServiceServer()
}

// UnimplementedUpvoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpvoteServiceServer struct {
}

func (UnimplementedUpvoteServiceServer) AddUpvoteToComment(context.Context, *AddUpvoteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUpvoteToComment not implemented")
}
func (UnimplementedUpvoteServiceServer) DeleteUpvoteFromComment(context.Context, *DeleteUpvoteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUpvoteFromComment not implemented")
}
func (UnimplementedUpvoteServiceServer) mustEmbedUnimplementedUpvoteServiceServer() {}

// UnsafeUpvoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpvoteServiceServer will
// result in compilation errors.
type UnsafeUpvoteServiceServer interface {
	mustEmbedUnimplementedUpvoteServiceServer()
}

func RegisterUpvoteServiceServer(s grpc.ServiceRegistrar, srv UpvoteServiceServer) {
	s.RegisterService(&UpvoteService_ServiceDesc, srv)
}

func _UpvoteService_AddUpvoteToComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUpvoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).AddUpvoteToComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningGRPC.UpvoteService/AddUpvoteToComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).AddUpvoteToComment(ctx, req.(*AddUpvoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_DeleteUpvoteFromComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUpvoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).DeleteUpvoteFromComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningGRPC.UpvoteService/DeleteUpvoteFromComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).DeleteUpvoteFromComment(ctx, req.(*DeleteUpvoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpvoteService_ServiceDesc is the grpc.ServiceDesc for UpvoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpvoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LearningGRPC.UpvoteService",
	HandlerType: (*UpvoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUpvoteToComment",
			Handler:    _UpvoteService_AddUpvoteToComment_Handler,
		},
		{
			MethodName: "DeleteUpvoteFromComment",
			Handler:    _UpvoteService_DeleteUpvoteFromComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_proto_files/upvote.proto",
}
