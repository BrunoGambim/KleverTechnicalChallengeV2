// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package comment_pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	GetCommentById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	DeleteCommentById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAllComments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CommentService_GetAllCommentsClient, error)
	InsertComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) GetCommentById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/LearningGRPC.CommentService/GetCommentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteCommentById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/LearningGRPC.CommentService/DeleteCommentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetAllComments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CommentService_GetAllCommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommentService_ServiceDesc.Streams[0], "/LearningGRPC.CommentService/GetAllComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &commentServiceGetAllCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommentService_GetAllCommentsClient interface {
	Recv() (*CommentResponse, error)
	grpc.ClientStream
}

type commentServiceGetAllCommentsClient struct {
	grpc.ClientStream
}

func (x *commentServiceGetAllCommentsClient) Recv() (*CommentResponse, error) {
	m := new(CommentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commentServiceClient) InsertComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/LearningGRPC.CommentService/InsertComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	GetCommentById(context.Context, *IdRequest) (*CommentResponse, error)
	DeleteCommentById(context.Context, *IdRequest) (*empty.Empty, error)
	GetAllComments(*empty.Empty, CommentService_GetAllCommentsServer) error
	InsertComment(context.Context, *CommentRequest) (*empty.Empty, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) GetCommentById(context.Context, *IdRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentById not implemented")
}
func (UnimplementedCommentServiceServer) DeleteCommentById(context.Context, *IdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentById not implemented")
}
func (UnimplementedCommentServiceServer) GetAllComments(*empty.Empty, CommentService_GetAllCommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllComments not implemented")
}
func (UnimplementedCommentServiceServer) InsertComment(context.Context, *CommentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertComment not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_GetCommentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningGRPC.CommentService/GetCommentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteCommentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteCommentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningGRPC.CommentService/DeleteCommentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteCommentById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetAllComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommentServiceServer).GetAllComments(m, &commentServiceGetAllCommentsServer{stream})
}

type CommentService_GetAllCommentsServer interface {
	Send(*CommentResponse) error
	grpc.ServerStream
}

type commentServiceGetAllCommentsServer struct {
	grpc.ServerStream
}

func (x *commentServiceGetAllCommentsServer) Send(m *CommentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommentService_InsertComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).InsertComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LearningGRPC.CommentService/InsertComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).InsertComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LearningGRPC.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCommentById",
			Handler:    _CommentService_GetCommentById_Handler,
		},
		{
			MethodName: "DeleteCommentById",
			Handler:    _CommentService_DeleteCommentById_Handler,
		},
		{
			MethodName: "InsertComment",
			Handler:    _CommentService_InsertComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllComments",
			Handler:       _CommentService_GetAllComments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_proto_files/comment.proto",
}
